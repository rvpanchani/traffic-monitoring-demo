(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))r(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const s of n.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&r(s)}).observe(document,{childList:!0,subtree:!0});function e(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function r(i){if(i.ep)return;i.ep=!0;const n=e(i);fetch(i.href,n)}})();const c={MAP:{DEFAULT_ZOOM:13,SEARCH_RADIUS:.045,RASTER_OPACITY:{TRAFFIC_FLOW:.6,TRAFFIC_INCIDENTS:.7,SIMPLE_TRAFFIC:.5}},TIMEOUTS:{TRAFFIC_LAYER_RETRY:3e3,LAYER_VERIFICATION:1e3},API:{GEOCODING_LIMIT:1,TILE_SIZE:256},UI:{SEARCH_DEBOUNCE:300,STATUS_TIMEOUT:5e3}},l={sanitizeHtml:a=>{const t=document.createElement("div");return t.textContent=a,t.innerHTML},sanitizeSearchInput:a=>typeof a!="string"?"":a.trim().replace(/[<>'"&]/g,"").substring(0,100),isValidCoordinate:(a,t)=>typeof a=="number"&&typeof t=="number"&&a>=-180&&a<=180&&t>=-90&&t<=90,debounce:(a,t)=>{let e;return(...r)=>{clearTimeout(e),e=setTimeout(()=>a.apply(null,r),t)}}},o={defaultLocation:{name:"Sinhgad Road, Pune",center:{lat:18.4633,lon:73.807},bbox:{minLat:18.42,maxLat:18.51,minLon:73.76,maxLon:73.85}},currentLocation:null,tomtomApiKey:"YOUR_TOMTOM_API_KEY_HERE"};o.currentLocation=o.defaultLocation;console.log("Environment variable VITE_TOMTOM_API_KEY:","Not found");console.log("Using API key:",o.tomtomApiKey.substring(0,10)+"...");class y{constructor(){this.map=null,this.incidents=[],this.markers=[],this.searchResults=[],this.isDestroyed=!1,this.debouncedSearch=l.debounce(()=>this.handleLocationSearch(),c.UI.SEARCH_DEBOUNCE),this.init()}async init(){try{this.setupEventListeners(),await this.initializeMap(),await this.loadTrafficIncidents()}catch(t){console.error("Failed to initialize application:",t),this.updateStatus(`Initialization failed: ${t.message}`,"error")}}destroy(){this.isDestroyed=!0,this.clearMarkers(),this.map&&(this.map.remove(),this.map=null)}setupEventListeners(){const t=document.getElementById("refresh-btn"),e=document.getElementById("search-btn"),r=document.getElementById("location-search"),i=document.getElementById("toggle-traffic-flow"),n=document.getElementById("toggle-traffic-incidents");t&&t.addEventListener("click",()=>this.loadTrafficIncidents()),e&&e.addEventListener("click",()=>this.handleLocationSearch()),r&&(r.addEventListener("keypress",s=>{s.key==="Enter"&&(s.preventDefault(),this.debouncedSearch())}),r.addEventListener("input",()=>{r.value.trim().length>2?r.classList.add("ready-to-search"):r.classList.remove("ready-to-search")})),i&&i.addEventListener("click",()=>this.toggleTrafficFlow()),n&&n.addEventListener("click",()=>this.toggleTrafficIncidents())}async initializeMap(){try{if(this.isDestroyed)return;if(this.updateStatus("Initializing map...","loading"),typeof tt>"u")throw new Error("TomTom Maps SDK not loaded");if(!o.tomtomApiKey||o.tomtomApiKey==="YOUR_TOMTOM_API_KEY_HERE"){console.warn("TomTom API key not configured, using demo mode"),this.showDemoMode();return}this.map=tt.map({key:o.tomtomApiKey,container:"map",center:[o.currentLocation.center.lon,o.currentLocation.center.lat],zoom:c.MAP.DEFAULT_ZOOM}),this.map.addControl(new tt.NavigationControl,"top-right"),this.map.addControl(new tt.FullscreenControl,"top-right"),this.map.addControl(new tt.ScaleControl({maxWidth:200,unit:"metric"}),"bottom-left"),this.map.addControl(new tt.GeolocateControl({positionOptions:{enableHighAccuracy:!0},trackUserLocation:!0}),"top-right"),this.map.on("load",()=>{this.isDestroyed||(console.log("Map load event fired"),this.addTrafficLayers())}),setTimeout(()=>{if(!this.isDestroyed&&this.map&&this.map.isStyleLoaded()){console.log("Backup timer: checking for traffic layers...");const t=this.map.getLayer("traffic-flow")||this.map.getLayer("simple-traffic"),e=this.map.getLayer("traffic-incidents-tiles");!t&&!e&&(console.log("No traffic layers found, trying to add them again..."),this.addTrafficLayers())}},c.TIMEOUTS.TRAFFIC_LAYER_RETRY),this.updateStatus("Map initialized successfully","success")}catch(t){console.error("Error initializing map:",t),this.updateStatus(`Map error: ${t.message}`,"error"),this.showDemoMode()}}addTrafficLayers(){try{if(this.isDestroyed)return;if(console.log("Adding traffic layers..."),!this.map.isStyleLoaded()){console.log("Map style not loaded yet, waiting..."),this.map.on("styledata",()=>{this.map.isStyleLoaded()&&!this.isDestroyed&&this.addTrafficLayers()});return}const t=`https://api.tomtom.com/traffic/map/4/tile/flow/relative-delay/{z}/{x}/{y}.png?key=${o.tomtomApiKey}`,e=`https://api.tomtom.com/traffic/map/4/tile/incidents/{z}/{x}/{y}.png?key=${o.tomtomApiKey}`;this.map.getSource("traffic-flow")||(console.log("Adding traffic flow source..."),this.map.addSource("traffic-flow",{type:"raster",tiles:[t],tileSize:c.API.TILE_SIZE,attribution:"Traffic data © TomTom"}),this.map.addLayer({id:"traffic-flow",type:"raster",source:"traffic-flow",paint:{"raster-opacity":c.MAP.RASTER_OPACITY.TRAFFIC_FLOW}}),console.log("Traffic flow layer added")),this.map.getSource("traffic-incidents-tiles")||(console.log("Adding traffic incidents source..."),this.map.addSource("traffic-incidents-tiles",{type:"raster",tiles:[e],tileSize:c.API.TILE_SIZE,attribution:"Incident data © TomTom"}),this.map.addLayer({id:"traffic-incidents-tiles",type:"raster",source:"traffic-incidents-tiles",paint:{"raster-opacity":c.MAP.RASTER_OPACITY.TRAFFIC_INCIDENTS}}),console.log("Traffic incidents layer added")),console.log("All traffic layers added successfully"),setTimeout(()=>{if(this.isDestroyed)return;const r=this.map.getLayer("traffic-flow"),i=this.map.getLayer("traffic-incidents-tiles");console.log("Layer verification - Flow layer:",!!r,"Incidents layer:",!!i)},c.TIMEOUTS.LAYER_VERIFICATION)}catch(t){console.error("Error adding traffic layers:",t),this.addSimpleTrafficLayer()}}addSimpleTrafficLayer(){try{if(this.isDestroyed)return;console.log("Trying simple traffic layer approach..."),this.map.getSource("simple-traffic")||(this.map.addSource("simple-traffic",{type:"raster",tiles:[`https://api.tomtom.com/traffic/map/4/tile/flow/relative/{z}/{x}/{y}.png?key=${o.tomtomApiKey}`],tileSize:c.API.TILE_SIZE}),this.map.addLayer({id:"simple-traffic",type:"raster",source:"simple-traffic",paint:{"raster-opacity":c.MAP.RASTER_OPACITY.SIMPLE_TRAFFIC}}),console.log("Simple traffic layer added"))}catch(t){console.error("Even simple traffic layer failed:",t)}}async handleLocationSearch(){const t=document.getElementById("location-search"),e=document.getElementById("search-btn");if(!t){console.error("Search input element not found");return}const r=t.value,i=l.sanitizeSearchInput(r);if(!i||i.length<2){this.updateStatus("Please enter a valid location (at least 2 characters)","error");return}try{this.updateStatus("Searching for location...","loading"),e&&(e.disabled=!0);const n=await this.geocodeLocation(i);if(!n)throw new Error("Location not found");o.currentLocation=n,this.updateCurrentLocationDisplay(n.name),this.map&&(this.map.setCenter([n.center.lon,n.center.lat]),this.map.setZoom(c.MAP.DEFAULT_ZOOM)),await this.loadTrafficIncidents(),this.updateStatus(`Switched to ${l.sanitizeHtml(n.name)}`,"success")}catch(n){console.error("Error searching location:",n),this.updateStatus(`Search error: ${n.message}`,"error")}finally{e&&(e.disabled=!1)}}async geocodeLocation(t){throw new Error("TomTom API key required for search")}updateCurrentLocationDisplay(t){const e=document.getElementById("current-location");e.textContent=`📍 Currently viewing: ${t}`}toggleTrafficFlow(){const t=document.getElementById("toggle-traffic-flow");if(!this.map||!this.map.isStyleLoaded()){console.warn("Map not ready for layer toggle");return}let e=null;if(this.map.getLayer("traffic-flow")?e="traffic-flow":this.map.getLayer("simple-traffic")&&(e="simple-traffic"),e){const r=this.map.getLayoutProperty(e,"visibility");r==="visible"||r===void 0?(this.map.setLayoutProperty(e,"visibility","none"),t.classList.remove("active"),t.textContent="Traffic Flow (OFF)",console.log(`${e} layer hidden`)):(this.map.setLayoutProperty(e,"visibility","visible"),t.classList.add("active"),t.textContent="Traffic Flow",console.log(`${e} layer shown`))}else console.warn("No traffic flow layer found. Available layers:",this.map.getStyle().layers.map(r=>r.id)),t.textContent="Traffic Flow (Unavailable)"}toggleTrafficIncidents(){const t=document.getElementById("toggle-traffic-incidents");if(!this.map||!this.map.isStyleLoaded()){console.warn("Map not ready for layer toggle");return}if(this.map.getLayer("traffic-incidents-tiles")){const e=this.map.getLayoutProperty("traffic-incidents-tiles","visibility");e==="visible"||e===void 0?(this.map.setLayoutProperty("traffic-incidents-tiles","visibility","none"),t.classList.remove("active"),t.textContent="Traffic Incidents (OFF)",console.log("Traffic incidents layer hidden")):(this.map.setLayoutProperty("traffic-incidents-tiles","visibility","visible"),t.classList.add("active"),t.textContent="Traffic Incidents",console.log("Traffic incidents layer shown"))}else console.warn("Traffic incidents layer not found. Available layers:",this.map.getStyle().layers.map(e=>e.id)),t.textContent="Traffic Incidents (Unavailable)"}async loadTrafficIncidents(){try{this.updateStatus("Loading traffic incidents...","loading");const t=document.getElementById("refresh-btn");t.disabled=!0,this.clearMarkers();const e=await this.fetchTrafficIncidents();e.length===0?(this.updateStatus("No incidents found","success"),this.displayNoIncidents()):(this.incidents=e,this.displayIncidents(),this.addMarkersToMap(),this.updateStatus(`Found ${e.length} incidents`,"success"))}catch(t){console.error("Error loading traffic incidents:",t),this.updateStatus(`Error: ${t.message}`,"error"),this.showDemoData()}finally{const t=document.getElementById("refresh-btn");t.disabled=!1}}async fetchTrafficIncidents(){throw console.log("Checking API key:",o.tomtomApiKey.substring(0,10)+"..."),new Error("Please configure your TomTom API key in the .env file")}processIncidentsData(t){return t.incidents?t.incidents.map(e=>{const r=e.properties,i=e.geometry;let n;return i.type==="Point"?n=i.coordinates:i.type==="LineString"||i.type==="MultiLineString"?n=(i.type==="LineString"?i.coordinates:i.coordinates[0])[0]:n=Array.isArray(i.coordinates[0])?i.coordinates[0]:i.coordinates,(!Array.isArray(n)||n.length<2)&&(console.warn("Invalid coordinates for incident:",e),n=[o.currentLocation.center.lon,o.currentLocation.center.lat]),{id:e.id||Math.random().toString(36),type:this.getIncidentType(r.iconCategory),description:this.getIncidentDescription(r.events),location:n,severity:this.getSeverity(r.magnitudeOfDelay),startTime:r.startTime,endTime:r.endTime,iconCategory:r.iconCategory}}):[]}getIncidentType(t){return{0:"Accident",1:"Fog",2:"Dangerous Conditions",3:"Rain",4:"Ice",5:"Lane Restrictions",6:"Lane Closure",7:"Road Closure",8:"Road Works",9:"Wind",10:"Flooding",11:"Detour",14:"Traffic Cluster"}[t]||"Unknown Incident"}getIncidentDescription(t){return!t||t.length===0?"No details available":t.map(e=>e.description).join(". ")}getSeverity(t){return t>=4?"critical":t>=2?"high":t>=1?"medium":"low"}displayIncidents(){const t=document.getElementById("incidents-list");t.innerHTML="",this.incidents.forEach(e=>{const r=this.createIncidentCard(e);t.appendChild(r)})}createIncidentCard(t){const e=document.createElement("div");e.className=`incident-card severity-${t.severity}`;const r=d=>{if(!d)return"Unknown";try{return new Date(d).toLocaleString()}catch{return console.warn("Invalid timestamp:",d),"Invalid time"}},i=d=>{if(!Array.isArray(d)||d.length<2)return"Location unavailable";const p=typeof d[0]=="number"?d[0].toFixed(4):"N/A";return`Lat: ${typeof d[1]=="number"?d[1].toFixed(4):"N/A"}, Lon: ${p}`},n=l.sanitizeHtml(t.type||"Unknown"),s=l.sanitizeHtml(t.description||"No description available"),f=l.sanitizeHtml(i(t.location)),m=l.sanitizeHtml(r(t.startTime));return e.innerHTML=`
      <div class="incident-type">${n}</div>
      <div class="incident-description">${s}</div>
      <div class="incident-location">📍 ${f}</div>
      <div class="incident-time">⏰ Started: ${m}</div>
    `,e}addMarkersToMap(){!this.map||this.isDestroyed||this.incidents.forEach(t=>{if(!Array.isArray(t.location)||t.location.length<2){console.warn("Invalid location for incident:",t);return}const[e,r]=t.location;if(!l.isValidCoordinate(e,r)){console.warn("Invalid coordinate values for incident:",t);return}try{const i=new tt.Marker({color:this.getSeverityColor(t.severity)}).setLngLat([e,r]).addTo(this.map),n=l.sanitizeHtml(t.type||"Unknown"),s=l.sanitizeHtml(t.description||"No description available"),f=l.sanitizeHtml(t.severity||"unknown"),m=new tt.Popup({offset:25}).setHTML(`
          <div style="font-family: Arial, sans-serif;">
            <h3 style="margin: 0 0 10px 0; color: #333;">${n}</h3>
            <p style="margin: 0 0 5px 0; font-size: 14px;">${s}</p>
            <p style="margin: 0; font-size: 12px; color: #666;">Severity: ${f}</p>
          </div>
        `);i.setPopup(m),this.markers.push(i)}catch(i){console.warn("Error adding marker for incident:",t,i)}})}getSeverityColor(t){return{low:"#4caf50",medium:"#ff9800",high:"#f44336",critical:"#9c27b0"}[t]||"#666"}clearMarkers(){this.markers.forEach(t=>t.remove()),this.markers=[]}displayNoIncidents(){const t=document.getElementById("incidents-list");t.innerHTML=`
      <div class="no-incidents">
        No traffic incidents reported in this area at the moment.
      </div>
    `}showDemoData(){this.incidents=this.getDemoIncidents(),this.displayIncidents(),this.updateStatus("Showing demo data (API key required for live data)","success")}showDemoMode(){const t=document.getElementById("map");t.innerHTML=`
      <div style="display: flex; align-items: center; justify-content: center; height: 100%; background: #f0f0f0; color: #666; text-align: center; padding: 2rem;">
        <div>
          <h3>Map View</h3>
          <p>TomTom Maps integration</p>
          <p><small>${o.currentLocation.name}</small></p>
        </div>
      </div>
    `}getDemoIncidents(){const t=o.currentLocation.center;return[{id:"demo1",type:"Road Works",description:"Construction work on the main carriageway. Expect delays.",location:[t.lon,t.lat],severity:"medium",startTime:new Date().toISOString(),endTime:null},{id:"demo2",type:"Lane Restrictions",description:"One lane closed due to maintenance work.",location:[t.lon+.003,t.lat+.007],severity:"low",startTime:new Date(Date.now()-36e5).toISOString(),endTime:null},{id:"demo3",type:"Accident",description:"Minor vehicle collision reported. Traffic moving slowly.",location:[t.lon-.007,t.lat-.013],severity:"high",startTime:new Date(Date.now()-18e5).toISOString(),endTime:null}]}updateStatus(t,e="loading"){const r=document.getElementById("status");r.textContent=t,r.className=`status ${e}`}}document.addEventListener("DOMContentLoaded",()=>{new y});
